use std::collections::VecDeque;

// Low-pass filter implemented using a FIR
#[derive(Debug, Clone)]
pub struct LowPassFilter {
    samples: VecDeque<f64>,
}

impl LowPassFilter {
    pub fn new() -> Self {
        Self {
            samples: VecDeque::new(),
        }
    }

    pub fn collect_sample(&mut self, sample: f64) {
        self.samples.push_back(sample);
        if self.samples.len() > FIR_COEFFICIENTS.len() {
            self.samples.pop_front();
        }
    }

    pub fn output_sample(&self) -> f64 {
        FIR_COEFFICIENT_0
            + self
                .samples
                .iter()
                .copied()
                .zip(FIR_COEFFICIENTS.iter().copied())
                .map(|(a, b)| a * b)
                .sum::<f64>()
    }
}

impl Default for LowPassFilter {
    fn default() -> Self {
        Self::new()
    }
}

// Generated in Octave using `fir1(85, 24000 / (1048576 / 2), 'low')`
const FIR_COEFFICIENT_0: f64 = -0.0001764831566621828;

#[allow(clippy::excessive_precision)]
const FIR_COEFFICIENTS: [f64; 85] = [
    -0.0001764831566621827,
    -0.0002645694667080285,
    -0.0003649228017828925,
    -0.0004832009417566624,
    -0.0006239378637968535,
    -0.0007900029671294351,
    -0.0009821033085667065,
    -0.001198354944247744,
    -0.001433947528048352,
    -0.001680923278334235,
    -0.001928087390724741,
    -0.002161062087308983,
    -0.00236249093265835,
    -0.002512394025945449,
    -0.002588668431873438,
    -0.002567721990486674,
    -0.00242522270103105,
    -0.002136940455545996,
    -0.001679653235228581,
    -0.001032086182323615,
    -0.0001758493932135193,
    0.0009036610267455806,
    0.002216434068464488,
    0.003767121096977084,
    0.00555445055844686,
    0.007570807348669391,
    0.009801998912787229,
    0.01222722402134792,
    0.01481925329811661,
    0.01754482320928618,
    0.02036523763380801,
    0.02323716360475529,
    0.02611360062751789,
    0.02894499641794473,
    0.03168047621728961,
    0.03426914825508827,
    0.03666144463012998,
    0.03881045500036306,
    0.04067321009876067,
    0.04221187325114131,
    0.0433948007329733,
    0.04419743587749166,
    0.0446030071952682,
    0.04460300719526819,
    0.04419743587749166,
    0.0433948007329733,
    0.04221187325114132,
    0.04067321009876067,
    0.03881045500036305,
    0.03666144463012998,
    0.03426914825508827,
    0.03168047621728962,
    0.02894499641794473,
    0.02611360062751789,
    0.02323716360475529,
    0.02036523763380801,
    0.01754482320928618,
    0.01481925329811661,
    0.01222722402134792,
    0.009801998912787229,
    0.007570807348669393,
    0.005554450558446862,
    0.003767121096977087,
    0.002216434068464489,
    0.0009036610267455803,
    -0.0001758493932135191,
    -0.001032086182323615,
    -0.001679653235228581,
    -0.002136940455545995,
    -0.002425222701031051,
    -0.002567721990486676,
    -0.002588668431873438,
    -0.002512394025945449,
    -0.002362490932658351,
    -0.002161062087308982,
    -0.001928087390724741,
    -0.001680923278334235,
    -0.001433947528048353,
    -0.001198354944247745,
    -0.0009821033085667061,
    -0.0007900029671294353,
    -0.0006239378637968537,
    -0.0004832009417566627,
    -0.0003649228017828926,
    -0.0002645694667080285,
];
